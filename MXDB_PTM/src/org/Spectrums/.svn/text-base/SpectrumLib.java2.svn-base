//a spectrum library that represents a collection of spectrum
//index by their corresponding peptides
//thus each peptide is a key that map to a list of
//spectrums that corresponds to the peptide
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;
import java.util.Collection;
import java.util.Iterator;
import java.util.TreeMap ;

public class SpectrumLib extends Object implements Iterable{
	private static boolean DETAIL = true;
	private static boolean NODETAIL = false;
	private Hashtable<String, Vector<Spectrum>> spectrumLibrary; 
		
	public SpectrumLib(){
		this.spectrumLibrary = new Hashtable();
	}
	
	public SpectrumLib(Hashtable<String, Vector<Spectrum>> lib){
		this.spectrumLibrary = lib;
	}
	
	public SpectrumLib(String file, String format){
		this();
		if(format.equals("MGF")){
			this.readSpectrumsFromMGF(file);	
		}
		else
			this.readSpectrumsFromMSP(file);
		
	}
	
	//read a list of spectrums from MGF file format
	public SpectrumLib readSpectrumsFromMGF(String fileName){
		try{
			BufferedReader bf = new BufferedReader(new FileReader(fileName));
			Spectrum s = new Spectrum();;
			boolean success = s.readSpectrumFromMGF(bf);
			Vector v;
			while(success){
				if(spectrumLibrary.containsKey(s.peptide)){
					v = (Vector)spectrumLibrary.get(s.peptide);
				}else{
					v = new Vector();
				}
				v.add(s);
				spectrumLibrary.put(s.peptide, v);
				s = new Spectrum();
				success = s.readSpectrumFromMGF(bf);
			}		 
			
		}catch(IOException ioe){
			System.out.println("Cannot Open MGF file");
			System.out.println(ioe.getMessage());
		}
		return this;
	}
	

	public SpectrumLib readSpectrumsFromMSP(String fileName){
		try{
			BufferedReader bf = new BufferedReader(new FileReader(fileName));
			Spectrum s = new Spectrum();;
			boolean success = s.readSpectrumFromMSP(bf);
			Vector v;
			while(success){
				//System.out.println(s) ;
				if(spectrumLibrary.containsKey(s.peptide)){
					v = (Vector)spectrumLibrary.get(s.peptide);
				}else{
					v = new Vector();
				}
				v.add(s);
				spectrumLibrary.put(s.peptide, v);
				s = new Spectrum();
				success = s.readSpectrumFromMSP(bf);
			}		 
			
		//	System.out.println("***********************************************************") ;
		}catch(IOException ioe){
			System.out.println("Cannot Open MSP file");
			System.out.println(ioe.getMessage());
		}
		return this;
	}


	//return all the spectrums in this spectrum library
	//in a vector form, so it is easier for us to iterate
	//through the spectrums and do something
	public Vector getAllSpectrums(){
		//being a little careless here, no strong typing
		Vector  spects = new Vector<Spectrum>();
		Iterator it = this.spectrumLibrary.values().iterator();
		while(it.hasNext()){
			spects.addAll((Vector<Spectrum>)it.next());
		}
		return spects;
	}
	
	public Iterator iterator(){
		return this.getAllSpectrums().iterator();
	}
	
	//the following few methods basically just apply some method to every
	//spectrum in the library, to be more elegant we should have implement
	//this as some higher order function, but for simplicity we will just 
	//implement this one by one
	
	//transform every spectrum in this libary to a vectorized one
	public void toNormVector(double binWidth, double minMass, double maxMass){
		Iterator it = this.iterator();
		Spectrum s, v;
		while(it.hasNext()){
			s = (Spectrum)it.next();
			v = s.toNormVector(binWidth, minMass, maxMass);
			s.setPeaks(v.getPeak());
		}
		
	}
	
	
	public String toString(){
		StringBuffer sb = new StringBuffer();	 
		Iterator it = this.iterator();
		Spectrum spect;
		while(it.hasNext()){
			spect = (Spectrum)it.next();
			sb.append(spect.toString());
		}
		return sb.toString();	
	}
	
	//print out the number of spectrum for each peptide in this
	//library, and various other statistics 
	//so we can get some idea of what does it looks like
	public void printStat(boolean detail){
		StringBuffer sb = new StringBuffer();	 
		Enumeration e = this.spectrumLibrary.keys();
		Vector <Spectrum> spects;
		String pep;
		int singleCount = 0;
		int multipleCount = 0;
		//counting spectrums for each peptide, number
		//of peptide with single and multiple spectrums
		while(e.hasMoreElements()){
			pep = (String)e.nextElement();
			spects = spectrumLibrary.get(pep);
			sb.append("peptide: " + pep 
					+ " # spectrums: " +  spects.size() 
					+ "\n");
			if(spects.size() > 1){
				multipleCount++;
			}else{
				singleCount++;
			}		
		}
		
		if(detail){
			System.out.println(sb.toString());
		}
		System.out.println("Total Number of Peptide: " + (singleCount + multipleCount));
		System.out.println("Peptide with single spectrum : " + singleCount);
		System.out.println("Peptide with multiple spctra : " + multipleCount);
	}
	
	//we may only want those spectra correspond to unmodified peptide
	//let's remvoe all spectra with modifcations
	public void removeModSpectra(){
		Collection <Vector <Spectrum>> values = this.spectrumLibrary.values();
		Iterator <Vector <Spectrum>> it = values.iterator();
		Vector <Spectrum>  v;
		int index = 0;
		//iterate over each values, which is a list of spectrums
		while(it.hasNext()){
			v = it.next();
			for(index = 0; index < v.size(); index++){
				if(v.get(index).modMass > 0){
					v.remove(index);
					index--; //since we just remove one element, backtrack one pointer
				}
								
			}
			//if this peptide has no more peptide remove it as well
			if(v.size() == 0){
				it.remove();
			}
		}
		
	}
	
	//remove all the peptides with only one spectrum, we can't use them
	//to generate our dataset
	public void removeSingle(){
		Collection <Vector <Spectrum>> values = this.spectrumLibrary.values();
		Iterator <Vector <Spectrum>> it = values.iterator();
		//iterate over each values, which is a list of spectrums
		Vector <Spectrum> v;
		int index = 0;
		while(it.hasNext()){
			v = it.next();
			if(v.size() == 1){
				it.remove();
			}
		}
		
	}
	
	//we divide the dataset into two 
	//one to simulate mix spectrum, the other
	//to perform the search, note this method modify the
	//original spectLib so those spectra that are separted
	//into one set is removed from this Spectrumlib
	public SpectrumLib Divide(){
		Hashtable <String, Vector <Spectrum>> newTable = new Hashtable();
		Collection <Vector <Spectrum>> values = this.spectrumLibrary.values();
		Iterator <Vector <Spectrum>> it = values.iterator();
		//iterate over each values, which is a list of spectrums
		Vector <Spectrum> v, vNew;
		while(it.hasNext()){
			v = it.next();
			//if the peptide has more than one peptide, we take the first one out
			//to create a different spectrum library, otherwise we don't use it
			//cause there is no way we can identitfy mix spectrum that consist of that peptide
			if(v.size() > 1){
				vNew = new Vector <Spectrum>();
				vNew.add(v.get(0));
				newTable.put(v.get(0).peptide, vNew);
				v.remove(0);
			}
		}
		
		return new SpectrumLib(newTable);
	}
	
	//creating a new spectrum library where we mix a pair
	//of spectrum in this library to simulated a mixture spectrum
	public SpectrumLib createMix(int size){
		return createMix(size, 1, 1);
	}
	
	public SpectrumLib createMix(int size, double scale, double scale2){
		Hashtable <String, Vector <Spectrum>> newTable = new Hashtable();
		Vector <Vector <Spectrum>> v = new Vector(this.spectrumLibrary.values());
		Vector <Spectrum> vNew; 
		Spectrum mixture;
	
		for(int i = 0; i < size; i++){
			for(int j = i+1; j < size; j++){
				
				vNew = (new Vector());
					
					mixture = new Spectrum(v.get(i).get(0), v.get(j).get(0), scale, scale2);
					vNew.add(mixture);
					newTable.put(mixture.peptide, vNew);
					mixture = null ;
	
			}
		}

						
		return new SpectrumLib(newTable);
	}
	
	public Vector<Spectrum> getSpectra(String peptide){
		return this.spectrumLibrary.get(peptide);
	}
	
	//since multiple spectrum can correspond to same
	//peptide, this method try to see how similar are
	//the spectrum corresponds to same peptide
	
	public void getSpectrumSimilarity(){
		Iterator<Vector<Spectrum>> it = this.spectrumLibrary.values().iterator();
		Spectrum first, next;
		Vector<Spectrum> spects;
		double maxSim = 0;
		int i = 0, j = 0;
		while(it.hasNext()){
			spects = it.next();
			//only can calcuate similarity if there is more than one peptide
			if(spects.size() > 1){
				maxSim = 0;
				for(i = 0; i < spects.size(); i++){
					for(j = i+1; j < spects.size(); j++){
						first = spects.get(i).toNormVector(1, 0.5, 2000);
						next = spects.get(j).toNormVector(1, 0.5, 2000);
						if(maxSim < next.cosineSim(first)){
							maxSim = next.cosineSim(first);
						}
						//System.out.println(first);
						//System.out.println(next);
						System.out.println("" + first.peptide + "\t" + next.cosineSim(first));
						if(i == spects.size()-1){
							//System.out.println("max: " + first.peptide + "\t" + maxSim);
						}
					
					}
				}
				
			}
		}
		
	}
	//we compute the inter-group spectra similarity, it serves
	//as a negative control for measuring similarity for those
	//spectra that belong to the same peptide with same charge
	public void getSpectrumDifference(int maxCount){
		int count = 0;
		String[] peptides = this.spectrumLibrary.keySet().toArray(new String[10]);
		//because all possible pair in the negative set
		//is usually very large we, set a limit on the total
		//number of scores to generate
		Spectrum s1, s2;
		//for each peptide we randomly select one spectrum to compare
		for(int i = 0; i < peptides.length; i++){
			for(int j = i+1; j < peptides.length; j++){
				s1 = this.getRandomSpectrum(peptides[i]).toNormVector(1, 0.5, 2000);
				s2 = this.getRandomSpectrum(peptides[j]).toNormVector(1, 0.5, 2000);
				System.out.println("" + peptides[i] + " | " + peptides[j] + "\t" + s1.cosineSim(s2));
				if(count == maxCount){
					return;
				}
				count++;
			}
		}
		
	}
	
	//given a candidate spectrum, score it against all other
	//spectrum in this library and return the rank of similarity
	//of the target peptide
	public int psimilarityRank(Spectrum m, String targetPeptide){
		int rank = 1;
		Iterator it = this.iterator();
		Spectrum curr, bestSpect = new Spectrum();
		double score = 0;
		double best = -10; //lowest score
		Vector<Spectrum> targetSpects = this.getSpectra(targetPeptide);
		//find the psimilarity (p for projectedCosine) of the answer
		for(int i = 0; i <  targetSpects.size(); i++){
			curr = targetSpects.get(i);
			score = curr.projectedCosine(m);
			bestSpect = score > best ? curr : bestSpect;
			best = score > best ? score : best;
			
		}
		//System.out.println("best targetscore: " + best);
		//find the psimiliarity for everything else in the library
		while(it.hasNext()){
			curr = (Spectrum)it.next();
			//curr = curr.toNormVector(1,50,2000);
			score = curr.projectedCosine(m);
			if(score > best){
				rank++;
			}
		}
		if(rank > 1000 && false){
			System.out.println("rank larger than 1k");
			System.out.println(m);
			System.out.println(bestSpect);
			return 1;
		}
		return rank;
	}
	
	//we score the mixspectrum against a combined spectrum of the
	//two peptide given as argument, this way we try to evaluate
	//how similar is a mixed spectrum and a combined spectrum in the library
	public double mixSpectrumSimilarity(Spectrum mix, String peptide1, String peptide2){
		double score  = 0;
		Vector<Spectrum> v1, v2;
		v1 = this.getSpectra(peptide1);
		v2 = this.getSpectra(peptide2);
		return score;
	}
	
	
	//for a given peptide randomly selected one of the spectrum
	//correspond to this peptide
	private Spectrum getRandomSpectrum(String peptide){
		Vector <Spectrum> v = this.spectrumLibrary.get(peptide);
		return v.get((int)Math.random() * (v.size() - 1));
	}
		
	public void solution(Spectrum mix) {
		
		Vector <Spectrum> spectra = getAllSpectrums() ;
		TreeMap <Double, Spectrum> sortedSpectra = new TreeMap() ;
		Hashtable answer = new Hashtable() ;
		Vector <Spectrum> v;
		Spectrum temp;
		SpectrumLib newLib, fin ;
		String realPeptide[] = mix.peptide.split(" & ") ;
		String sol = realPeptide[1] + " & " + realPeptide[0] ;
		int i = 0;
		long size, rank = 1;
				
		size = spectra.size();
				
		// Filtering
		
		// calculate the projected cosines and store it
		// in a treemap (ordered)
								
		for(int j = 0; j < spectra.size(); j++) {
			
			temp = (spectra.elementAt(j)).toNormVector(1,0.5,2000) ; 

			if (temp.projectedCosine(mix) > 0.90) {
			//	System.out.println("aqui") ;
				sortedSpectra.put(new Double( temp.projectedCosine(mix)), temp) ;	
			}
		}
		
		
		// Get best scores (above threshold)
		
		spectra = new Vector() ;	
		
		while (!sortedSpectra.isEmpty())
				spectra.add(sortedSpectra.remove(sortedSpectra.firstKey())) ; 
		
		
		sortedSpectra = null ;
		

		Spectrum mixture = null ;
		TreeMap solutions = new TreeMap() ;
		
		for (int k = 0; k < spectra.size();k++) {
			for(int l = k + 1; l < spectra.size();l++){
				
				if ( !(((spectra.elementAt(k)).peptide).equals(((spectra.elementAt(l)).peptide))) ) {
					
					mixture = new Spectrum(spectra.get(k), spectra.get(l), 1, 1);
					solutions.put(new Double(mixture.cosineSim(mix)), mixture.peptide) ;
					mixture = null ;
				}
								
			}
		}

		String pep ;
		size = solutions.size() ;
					
		if (!solutions.isEmpty()) {
		
			pep = (String)solutions.remove(solutions.lastKey()) ;
			
			while (!mix.peptide.equals(pep) && !sol.equals(pep) && !solutions.isEmpty()) {
						
				pep = (String)solutions.remove( solutions.lastKey()  ) ;
				rank++ ;
		
			}	
				
			if (mix.peptide.equals(pep) || sol.equals(pep)){
			//	System.out.print("Found: ") ;
				System.out.println(rank) ;
			}
			else
				System.out.println("0") ;
		}
		
		else
			System.out.println("Answer not generated") ;
		
	} // end of function

	
	public static void main(String[] args){
	
		//testReadMSP() ;
		testProjectCosine() ;
		
		/*
		String filename = "dradiodurans.msp" ;
		SpectrumLib l = new SpectrumLib(filename, "MGF") ;
		Spectrum a ;

		l.removeModSpectra() ;
		l.removeSingle() ;
			
		SpectrumLib l2 = l.Divide() ;
		SpectrumLib lib1 = l2.createMix(250) ;
		Vector temp = lib1.getAllSpectrums() ;
		
		for (int j = 0; j < 10000; j++) {
			a = (Spectrum)temp.get(j) ;
			l.solution(a) ;
		}*/		
	}
	
	public static void testReadMSP(){
		String filename = "std_proteins.msp";
		SpectrumLib l = new SpectrumLib(filename, "MSP");
		System.out.print(l);
		l.printStat(DETAIL);
		l.removeModSpectra();
		l.printStat(NODETAIL);
		System.out.println();
		System.out.println("Diving Spectrums library into two sets");
		SpectrumLib lib1 = new SpectrumLib(filename, "MSP");
		lib1.printStat(NODETAIL);
		lib1.removeModSpectra();
		lib1.printStat(NODETAIL);
		SpectrumLib lib2 = lib1.Divide();
		lib1.printStat(NODETAIL);
		lib2.printStat(NODETAIL);
		SpectrumLib mixlib = lib2.createMix(5);
		mixlib.printStat(NODETAIL);
		l.getSpectrumSimilarity();
		l.getSpectrumDifference(10000);
	}
	
	
	public static void testProjectCosine(){
		if(SpectrumLib.DETAIL){
			//return;
		}
		String filename = "std_proteins.msp";
		SpectrumLib lib1 = new SpectrumLib(filename, "MSP");
		System.out.println("Original Library: ");
		lib1.printStat(NODETAIL);
		System.out.println("Removing Spectra with modification");
		lib1.removeModSpectra();
		lib1.printStat(NODETAIL);
		System.out.println("==========================================================================================");
		System.out.println();
		System.out.println("Calculating within group similarity:");
		lib1.getSpectrumSimilarity();
		System.out.println("==========================================================================================");
		System.out.println();
		System.out.println("Calculating btw group similarity/difference:");
		lib1.getSpectrumDifference(50000);
		System.out.println("==========================================================================================");
		System.out.println();
		System.out.println("Diving Spectrums library into two sets");
		SpectrumLib lib2 = lib1.Divide();
		System.out.println("Dataset 1:");
		lib1.printStat(NODETAIL);
		System.out.println("Dataset 2:");
		lib2.printStat(NODETAIL);
		SpectrumLib mixlib = lib2.createMix(300);
		System.out.println("The Mixture Library:");
		mixlib.printStat(NODETAIL);
		System.out.println("Calculating projected similarity: ");
		
		Iterator<Vector<Spectrum>> it = mixlib.spectrumLibrary.values().iterator();
		String[] peptides;
		Spectrum mix, candidate;
		Vector<Spectrum> spects;
		int i = 0;
		while(it.hasNext()){
			mix = it.next().get(0);
			//System.out.println(mix);
			peptides = mix.peptide.split(" & ");
			spects = lib1.getSpectra(peptides[0]);
			for(i = 0; i < spects.size(); i++){
				candidate = spects.get(i).toNormVector(1, 0.5, 2000);
				//System.out.println(candidate);
				System.out.print("" + peptides[0]);
				System.out.println("\t" + candidate.projectedCosine(mix));
			}
			
			spects = lib1.getSpectra(peptides[1]);
			System.out.print("" + peptides[1]);
			for(i = 0; i < spects.size(); i++){
				candidate = spects.get(i).toNormVector(1, 0.5, 2000);
				//System.out.println(candidate);
				//System.out.print("" + peptides[1]);
				System.out.println("" + peptides[1] + "\t" + candidate.projectedCosine(mix));
			}
			//if(peptides[0].equals("DAVTYTEHAK")){
				//return;
			//}
		}
		System.out.println("==========================================================================================");
		System.out.println();
		System.out.println("Calculating Similarity ranks: ");
		int r1, r2;
		lib1.toNormVector(1, 0.5, 2000);
		Iterator mixspects = mixlib.iterator();
		while(mixspects.hasNext()){
			mix = (Spectrum)mixspects.next();
			//System.out.println(mix);
			peptides = mix.peptide.split(" & ");
			r1 = lib1.psimilarityRank(mix, peptides[0]);
			r2 = lib1.psimilarityRank(mix, peptides[1]);
			System.out.println("" + peptides[0] + ": " + r1);
			System.out.println("" + peptides[1] + ": " + r2);
			
		}
		
		System.out.println("==========================================================================================");
		System.out.println();
		mixlib = lib2.createMix(300, 0.8, 1);
		System.out.println("The Mixture Library2:");
		mixlib.printStat(NODETAIL);
		System.out.println();
		System.out.println("Calculating Similarity ranks: ");
		//lib1.toNormVector(1, 50, 2000);
		mixspects = mixlib.iterator();
		while(mixspects.hasNext()){
			mix = (Spectrum)mixspects.next();
			//System.out.println(mix);
			peptides = mix.peptide.split(" & ");
			r1 = lib1.psimilarityRank(mix, peptides[0]);
			r2 = lib1.psimilarityRank(mix, peptides[1]);
			System.out.println("" + peptides[0] + ": " + r1);
			System.out.println("" + peptides[1] + ": " + r2);
			
		}
		
		System.out.println("==========================================================================================");
		System.out.println();
		mixlib = lib2.createMix(300, 0.6, 1);
		System.out.println("The Mixture Library2:");
		mixlib.printStat(NODETAIL);
		System.out.println();
		System.out.println("Calculating Similarity ranks: ");
		mixspects = mixlib.iterator();
		while(mixspects.hasNext()){
			mix = (Spectrum)mixspects.next();
			//System.out.println(mix);
			peptides = mix.peptide.split(" & ");
			r1 = lib1.psimilarityRank(mix, peptides[0]);
			r2 = lib1.psimilarityRank(mix, peptides[1]);
			System.out.println("" + peptides[0] + ": " + r1);
			System.out.println("" + peptides[1] + ": " + r2);
			
		}
		
		System.out.println("==========================================================================================");
		System.out.println();
		mixlib = lib2.createMix(300, 0.3, 1);
		System.out.println("The Mixture Library2:");
		mixlib.printStat(NODETAIL);
		System.out.println();
		System.out.println("Calculating Similarity ranks: ");
		mixspects = mixlib.iterator();
		while(mixspects.hasNext()){
			mix = (Spectrum)mixspects.next();
			//System.out.println(mix);
			peptides = mix.peptide.split(" & ");
			r1 = lib1.psimilarityRank(mix, peptides[0]);
			r2 = lib1.psimilarityRank(mix, peptides[1]);
			System.out.println("" + peptides[0] + ": " + r1);
			System.out.println("" + peptides[1] + ": " + r2);
			
		}
		
	}
	
}
